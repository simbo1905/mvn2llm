name: Build JAR and Native Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the build (e.g., 1.0.0)'
        required: true
        default: '0.0.1'
      java_version:
        description: 'Java version (e.g., 23)'
        required: false
        default: '23'

jobs:
  build-jar:
    name: Build JAR on Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ github.event.inputs.java_version }}
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/mvn2llm.jar

  build-native:
    needs: build-jar
    name: Build Windows Native Image
    runs-on: windows-latest
    env:
      JAVA_VERSION: ${{ github.event.inputs.java_version }}

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/

      - name: Download and Extract GraalVM
        shell: powershell
        run: |
          $graalvmUrl = "https://download.oracle.com/graalvm/${{ env.JAVA_VERSION }}/latest/graalvm-jdk-${{ env.JAVA_VERSION }}_windows-x64_bin.zip"
          
          Write-Host "Downloading GraalVM from $graalvmUrl"
          Invoke-WebRequest -Uri $graalvmUrl -OutFile graalvm.zip
          
          Write-Host "Extracting GraalVM..."
          Expand-Archive -Path graalvm.zip -DestinationPath .
          
          $binDir = Get-ChildItem -Recurse -Directory | 
                   Where-Object { $_.Name -eq "bin" -and $_.FullName -like "*graalvm*" } |
                   Select-Object -First 1
          
          if (-not $binDir) {
              throw "Could not find GraalVM bin directory"
          }
          
          echo "$($binDir.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Append
          
          $nativeImageDir = Get-ChildItem -Recurse -Directory |
                          Where-Object { $_.FullName -like "*svm\bin*" } |
                          Select-Object -First 1
          
          if ($nativeImageDir) {
              echo "$($nativeImageDir.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Append
          }
          
          $nativeImageExe = Get-ChildItem -Recurse -File |
                           Where-Object { $_.Name -eq "native-image.exe" } |
                           Select-Object -First 1
          
          if (-not $nativeImageExe) {
              throw "native-image.exe not found"
          }
          
          Write-Host "Native image found at: $($nativeImageExe.FullName)"

      - name: Build Native Image
        shell: powershell
        run: |
          $output_name = "mvn2llm-${{ github.event.inputs.version }}.exe"
          $extra_flags = ""
          
          native-image.exe `
            --no-fallback `
            --enable-preview `
            --enable-native-access=ALL-UNNAMED `
            -H:+ReportExceptionStackTraces `
            -H:+AddAllCharsets `
            $extra_flags `
            -jar target/mvn2llm.jar `
            $output_name

      - name: Upload Native Image
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-windows
          path: ./mvn2llm-${{ github.event.inputs.version }}.exe
