name: Build Native Images

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the build (e.g., 1.0.0)'
        required: true
        default: '0.0.1'
      java_version:
        description: 'Java version (e.g., 23)'
        required: true
        default: '23'
  release:
    types: [ created ]

env:
  JAVA_VERSION: ${{ github.event_name == 'release' && '23' || github.event.inputs.java_version }}
  VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || github.event.inputs.version }}

jobs:
  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ github.event.inputs.java_version }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/mvn2llm.jar

  build-windows:
    needs: build-jar
    name: Build Windows Native Image
    runs-on: windows-latest
    env:
      JAVA_VERSION: ${{ github.event.inputs.java_version }}

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/

      - name: Download and Extract GraalVM
        shell: powershell
        run: |
          $graalvmUrl = "https://download.oracle.com/graalvm/${{ env.JAVA_VERSION }}/latest/graalvm-jdk-${{ env.JAVA_VERSION }}_windows-x64_bin.zip"
          
          Write-Host "Downloading GraalVM from $graalvmUrl"
          Invoke-WebRequest -Uri $graalvmUrl -OutFile graalvm.zip
          
          Write-Host "Extracting GraalVM..."
          Expand-Archive -Path graalvm.zip -DestinationPath .
          
          $binDir = Get-ChildItem -Recurse -Directory | 
                   Where-Object { $_.Name -eq "bin" -and $_.FullName -like "*graalvm*" } |
                   Select-Object -First 1
          
          if (-not $binDir) {
              throw "Could not find GraalVM bin directory"
          }
          
          echo "$($binDir.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Append
          
          $nativeImageDir = Get-ChildItem -Recurse -Directory |
                          Where-Object { $_.FullName -like "*svm\bin*" } |
                          Select-Object -First 1
          
          if ($nativeImageDir) {
              echo "$($nativeImageDir.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Append
          }
          
          $nativeImageExe = Get-ChildItem -Recurse -File |
                           Where-Object { $_.Name -eq "native-image.exe" } |
                           Select-Object -First 1
          
          if (-not $nativeImageExe) {
              throw "native-image.exe not found"
          }
          
          Write-Host "Native image found at: $($nativeImageExe.FullName)"

      - name: Build Native Image
        shell: powershell
        run: |
          $output_name = "mvn2llm-${{ github.event.inputs.version }}.exe"
          $extra_flags = ""
          
          native-image.exe `
            --no-fallback `
            --enable-preview `
            --enable-native-access=ALL-UNNAMED `
            -H:+ReportExceptionStackTraces `
            -H:+AddAllCharsets `
            $extra_flags `
            -jar target/mvn2llm.jar `
            $output_name

      - name: Upload Native Image
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-windows
          path: ./mvn2llm-${{ github.event.inputs.version }}.exe

  build-macos:
    needs: build-jar
    name: Build macOS Native Image
    runs-on: macos-latest
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/

      - name: Download and Setup GraalVM
        run: |
          curl -O "https://download.oracle.com/graalvm/${{ github.event.inputs.java_version }}/latest/graalvm-jdk-${{ github.event.inputs.java_version }}_macos-x64_bin.tar.gz"
          tar xzf graalvm-jdk-${{ github.event.inputs.java_version }}_macos-x64_bin.tar.gz
          
          # Find the GraalVM bin directory
          GRAALVM_BIN=$(find . -type d -name "bin" -path "*/graalvm*" | head -n 1)
          echo "Found GraalVM bin directory: $GRAALVM_BIN"
          
          # Set the GRAALVM_HOME to the parent of the bin directory
          GRAALVM_HOME=$(dirname "$GRAALVM_BIN")
          echo "GRAALVM_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          echo "PATH=$GRAALVM_BIN:$PATH" >> $GITHUB_ENV

      - name: Build Native Image
        run: |
          # Verify native-image location
          ls -la $GRAALVM_HOME/bin/native-image
          
          # Build native image
          $GRAALVM_HOME/bin/native-image \
            --no-fallback \
            --enable-preview \
            --enable-native-access=ALL-UNNAMED \
            -H:+ReportExceptionStackTraces \
            -H:+AddAllCharsets \
            -jar target/mvn2llm.jar \
            mvn2llm

          mv mvn2llm mvn2llm-${{ github.event.inputs.version }}

      - name: Upload Native Image
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-macos
          path: ./mvn2llm-${{ github.event.inputs.version }}

  build-linux-amd64:
    needs: build-jar
    name: Build Linux AMD64 Native Image
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/

      - name: Download and Setup GraalVM
        run: |
          wget "https://download.oracle.com/graalvm/${{ github.event.inputs.java_version }}/latest/graalvm-jdk-${{ github.event.inputs.java_version }}_linux-x64_bin.tar.gz"
          tar xzf graalvm-jdk-${{ github.event.inputs.java_version }}_linux-x64_bin.tar.gz
          
          # Find the GraalVM bin directory
          GRAALVM_BIN=$(find . -type d -name "bin" -path "*/graalvm*" | head -n 1)
          echo "Found GraalVM bin directory: $GRAALVM_BIN"
          
          # Set the GRAALVM_HOME to the parent of the bin directory
          GRAALVM_HOME=$(dirname "$GRAALVM_BIN")
          echo "GRAALVM_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          echo "PATH=$GRAALVM_BIN:$PATH" >> $GITHUB_ENV

      - name: Build Native Image
        run: |
          # Verify native-image location
          ls -la $GRAALVM_HOME/bin/native-image
          
          # Build native image
          $GRAALVM_HOME/bin/native-image \
            --no-fallback \
            --enable-preview \
            --enable-native-access=ALL-UNNAMED \
            -H:+ReportExceptionStackTraces \
            -H:+AddAllCharsets \
            -jar target/mvn2llm.jar \
            mvn2llm

          mv mvn2llm mvn2llm-linux-amd64-${{ github.event.inputs.version }}

      - name: Upload Native Image
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-linux-amd64
          path: ./mvn2llm-linux-amd64-${{ github.event.inputs.version }}

  build-linux-x86_64:
    needs: build-jar
    name: Build Linux x86_64 Native Image
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/

      - name: Download and Setup GraalVM
        run: |
          wget "https://download.oracle.com/graalvm/${{ github.event.inputs.java_version }}/latest/graalvm-jdk-${{ github.event.inputs.java_version }}_linux-x64_bin.tar.gz"
          tar xzf graalvm-jdk-${{ github.event.inputs.java_version }}_linux-x64_bin.tar.gz
          
          # Find the GraalVM bin directory
          GRAALVM_BIN=$(find . -type d -name "bin" -path "*/graalvm*" | head -n 1)
          echo "Found GraalVM bin directory: $GRAALVM_BIN"
          
          # Set the GRAALVM_HOME to the parent of the bin directory
          GRAALVM_HOME=$(dirname "$GRAALVM_BIN")
          echo "GRAALVM_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          echo "PATH=$GRAALVM_BIN:$PATH" >> $GITHUB_ENV

      - name: Build Native Image with x86_64 Target
        run: |
          # Verify native-image location
          ls -la $GRAALVM_HOME/bin/native-image
          
          # Build native image
          $GRAALVM_HOME/bin/native-image \
            --no-fallback \
            --enable-preview \
            --enable-native-access=ALL-UNNAMED \
            -H:+ReportExceptionStackTraces \
            -H:+AddAllCharsets \
            --native-compiler-options=-march=x86-64 \
            -jar target/mvn2llm.jar \
            mvn2llm

          mv mvn2llm mvn2llm-linux-x86_64-${{ github.event.inputs.version }}

      - name: Upload Native Image
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-linux-x86_64
          path: ./mvn2llm-linux-x86_64-${{ github.event.inputs.version }}

  upload-to-release:
    needs: [ build-windows, build-macos, build-linux-amd64, build-linux-x86_64 ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate SHA256 checksums
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            sha256sum * > ../../"${dir%/}-sha256.txt"
            cd ..
          done
          cd ..

      - name: Upload binaries to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload each binary
          for file in artifacts/*/*; do
            gh release upload "${{ github.event.release.tag_name }}" "$file" --clobber
          done
          
          # Upload checksums
          for sum in *-sha256.txt; do
            gh release upload "${{ github.event.release.tag_name }}" "$sum" --clobber
          done
