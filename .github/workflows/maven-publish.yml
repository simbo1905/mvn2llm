name: Build Native Images for Multiple Platforms

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the build (e.g., 1.0.0)'
        required: true
        default: '0.0.1'
      java_version:
        description: 'Java version (e.g., 23)'
        required: true
        default: '23'

jobs:
  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ github.event.inputs.java_version }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/mvn2llm.jar

  build-native:
    needs: build-jar
    name: Build Native Image - ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact_suffix: .exe
          - os: macos-latest
            platform: macos
            artifact_suffix: ''
          - os: ubuntu-latest
            platform: linux-amd64
            artifact_suffix: ''
          - os: ubuntu-latest
            platform: linux-x86_64
            artifact_suffix: ''
    runs-on: ${{ matrix.os }}
    env:
      JAVA_VERSION: ${{ github.event.inputs.java_version }}

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/

      - name: Download and Setup GraalVM (Windows)
        if: matrix.platform == 'windows'
        shell: powershell
        run: |
          $graalvmUrl = "https://download.oracle.com/graalvm/${{ env.JAVA_VERSION }}/latest/graalvm-jdk-${{ env.JAVA_VERSION }}_windows-x64_bin.zip"
          
          Write-Host "Downloading GraalVM from $graalvmUrl"
          Invoke-WebRequest -Uri $graalvmUrl -OutFile graalvm.zip
          
          Expand-Archive -Path graalvm.zip -DestinationPath .
          
          $binDir = Get-ChildItem -Recurse -Directory | 
                   Where-Object { $_.Name -eq "bin" -and $_.FullName -like "*graalvm*" } |
                   Select-Object -First 1
          
          echo "$($binDir.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Append
          
          $nativeImageDir = Get-ChildItem -Recurse -Directory |
                          Where-Object { $_.FullName -like "*svm\bin*" } |
                          Select-Object -First 1
          
          if ($nativeImageDir) {
              echo "$($nativeImageDir.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Append
          }

      - name: Download and Setup GraalVM (macOS)
        if: matrix.platform == 'macos'
        run: |
          curl -O "https://download.oracle.com/graalvm/${{ env.JAVA_VERSION }}/latest/graalvm-jdk-${{ env.JAVA_VERSION }}_macos-x64_bin.tar.gz"
          tar xzf graalvm-jdk-${{ env.JAVA_VERSION }}_macos-x64_bin.tar.gz
          
          GRAALVM_BIN=$(find . -type d -name "bin" -path "*/graalvm*" | head -n 1)
          GRAALVM_HOME=$(dirname "$GRAALVM_BIN")
          echo "GRAALVM_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          echo "PATH=$GRAALVM_BIN:$PATH" >> $GITHUB_ENV

      - name: Download and Setup GraalVM (Linux)
        if: contains(matrix.platform, 'linux')
        run: |
          ARCH_SUFFIX=$(if [ "${{ matrix.platform }}" = "linux-x86_64" ]; then echo "x64"; else echo "aarch64"; fi)
          wget "https://download.oracle.com/graalvm/${{ env.JAVA_VERSION }}/latest/graalvm-jdk-${{ env.JAVA_VERSION }}_linux-${ARCH_SUFFIX}_bin.tar.gz"
          tar xzf graalvm-jdk-${{ env.JAVA_VERSION }}_linux-${ARCH_SUFFIX}_bin.tar.gz
          
          GRAALVM_BIN=$(find . -type d -name "bin" -path "*/graalvm*" | head -n 1)
          GRAALVM_HOME=$(dirname "$GRAALVM_BIN")
          echo "GRAALVM_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          echo "PATH=$GRAALVM_BIN:$PATH" >> $GITHUB_ENV

      - name: Build Native Image (Windows)
        if: matrix.platform == 'windows'
        shell: powershell
        run: |
          $output_name = "mvn2llm-${{ github.event.inputs.version }}${{ matrix.artifact_suffix }}"
          native-image.exe `
            --no-fallback `
            --enable-preview `
            --enable-native-access=ALL-UNNAMED `
            -H:+ReportExceptionStackTraces `
            -H:+AddAllCharsets `
            -jar target/mvn2llm.jar `
            $output_name

      - name: Build Native Image (Unix-like)
        if: matrix.platform != 'windows'
        run: |
          $GRAALVM_HOME/bin/native-image \
            --no-fallback \
            --enable-preview \
            --enable-native-access=ALL-UNNAMED \
            -H:+ReportExceptionStackTraces \
            -H:+AddAllCharsets \
            -jar target/mvn2llm.jar \
            mvn2llm-${{ github.event.inputs.version }}${{ matrix.artifact_suffix }}

      - name: Upload Native Image
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-${{ matrix.platform }}
          path: ./mvn2llm-${{ github.event.inputs.version }}${{ matrix.artifact_suffix }}
