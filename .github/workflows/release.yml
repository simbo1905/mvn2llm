name: Release Build

on:
  push:
    tags:
      - 'release/*'

permissions:
  contents: write
  packages: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: get-version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/release/}
          echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Version: ${TAG_NAME}"

      - name: Create Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          gh release create "v${VERSION}" \
            --title "Release ${VERSION}" \
            --draft \
            --notes "Release ${VERSION} - Draft created by automation"

  build-jar:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Rename and show JAR
        env:
          VERSION: ${{ needs.prepare-release.outputs.version }}
        run: |
          mv target/mvn2llm.jar target/mvn2llm-${VERSION}.jar
          echo "JAR artifact: mvn2llm-${VERSION}.jar"
          ls -la target/mvn2llm-*.jar

      - name: Upload JAR to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.prepare-release.outputs.version }}
        run: |
          gh release upload "v${VERSION}" target/mvn2llm-${VERSION}.jar --clobber

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/mvn2llm-${{ needs.prepare-release.outputs.version }}.jar

  build-windows:
    needs: [prepare-release, build-jar]
    runs-on: windows-latest
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '23'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: Build Native Image
        shell: powershell
        run: |
          $output_name = "mvn2llm-$env:VERSION"
          
          native-image `
            --no-fallback `
            --enable-preview `
            --enable-native-access=ALL-UNNAMED `
            -H:+ReportExceptionStackTraces `
            -H:+AddAllCharsets `
            -jar target/mvn2llm-$env:VERSION.jar `
            $output_name
          
          echo "Windows native artifact: mvn2llm-$env:VERSION.exe"
          dir mvn2llm-*.exe
          
          # Smoke test - verify executable runs
          echo "Testing native executable..."
          .\mvn2llm-$env:VERSION.exe -h

      - name: Upload to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: powershell
        run: |
          gh release upload "v$env:VERSION" "mvn2llm-$env:VERSION.exe" --clobber

  build-macos:
    needs: [prepare-release, build-jar]
    runs-on: macos-latest
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/

      - name: Download and Setup GraalVM
        run: |
          curl -O "https://download.oracle.com/graalvm/23/latest/graalvm-jdk-23_macos-x64_bin.tar.gz"
          tar xzf graalvm-jdk-23_macos-x64_bin.tar.gz
          
          GRAALVM_BIN=$(find . -type d -name "bin" -path "*/graalvm*" | head -n 1)
          GRAALVM_HOME=$(dirname "$GRAALVM_BIN")
          echo "GRAALVM_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          echo "PATH=$GRAALVM_BIN:$PATH" >> $GITHUB_ENV

      - name: Build Native Image
        run: |
          $GRAALVM_HOME/bin/native-image \
            --no-fallback \
            --enable-preview \
            --enable-native-access=ALL-UNNAMED \
            -H:+ReportExceptionStackTraces \
            -H:+AddAllCharsets \
            -jar target/mvn2llm-${VERSION}.jar \
            mvn2llm-${VERSION}-bin
          
          echo "macOS native artifact: mvn2llm-${VERSION}-bin"
          ls -la mvn2llm-*-bin
          
          # Smoke test - verify executable runs
          echo "Testing native executable..."
          ./mvn2llm-${VERSION}-bin -h

      - name: Upload to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "v${VERSION}" "mvn2llm-${VERSION}-bin" --clobber

  build-linux:
    needs: [prepare-release, build-jar]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ 'amd64', 'x86-64' ]
        include:
          - arch: 'amd64'
            compiler_flags: ''
          - arch: 'x86-64'
            compiler_flags: '--native-compiler-options=-march=x86-64'
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/

      - name: Download and Setup GraalVM
        run: |
          wget "https://download.oracle.com/graalvm/23/latest/graalvm-jdk-23_linux-x64_bin.tar.gz"
          tar xzf graalvm-jdk-23_linux-x64_bin.tar.gz
          
          GRAALVM_BIN=$(find . -type d -name "bin" -path "*/graalvm*" | head -n 1)
          GRAALVM_HOME=$(dirname "$GRAALVM_BIN")
          echo "GRAALVM_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          echo "PATH=$GRAALVM_BIN:$PATH" >> $GITHUB_ENV

      - name: Build Native Image
        run: |
          $GRAALVM_HOME/bin/native-image \
            --no-fallback \
            --enable-preview \
            --enable-native-access=ALL-UNNAMED \
            -H:+ReportExceptionStackTraces \
            -H:+AddAllCharsets \
            ${{ matrix.compiler_flags }} \
            -jar target/mvn2llm-${VERSION}.jar \
            mvn2llm-${VERSION}-${{ matrix.arch }}-bin
          
          echo "Linux native artifact: mvn2llm-${VERSION}-${{ matrix.arch }}-bin"
          ls -la mvn2llm-*-bin
          
          # Smoke test - verify executable runs
          echo "Testing native executable..."
          ./mvn2llm-${VERSION}-${{ matrix.arch }}-bin -h

      - name: Upload to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "v${VERSION}" "mvn2llm-${VERSION}-${{ matrix.arch }}-bin" --clobber

  build-jpackage-windows:
    needs: [prepare-release, build-jar]
    name: Build Windows jpackage
    runs-on: windows-latest
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/
          
      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          
      - name: Build jpackage MSI
        shell: powershell
        run: |
          # Convert version for MSI (major version must be 0-255)
          # Use format: 1.YY.MMDD where YY is last 2 digits of year
          $parts = $env:VERSION -split '\.'
          $year = [int]$parts[0]
          $month = [int]$parts[1] 
          $day = [int]$parts[2]
          $build = if ($parts.Count -gt 3) { [int]$parts[3] } else { 0 }
          
          # Create MSI version: 1.YY.MMDD
          $msiVersion = "1.$($year % 100).$month$day"
          echo "Using MSI version: $msiVersion (from $env:VERSION)"
          
          jpackage --input target `
                   --main-jar mvn2llm-$env:VERSION.jar `
                   --name mvn2llm `
                   --app-version $msiVersion `
                   --type msi `
                   --java-options "--enable-preview --enable-native-access=ALL-UNNAMED" `
                   --win-console `
                   --dest target/jpackage
          
          $msiFile = Get-ChildItem -Path target/jpackage -Filter "*.msi" | Select-Object -First 1
          $newName = "mvn2llm-$env:VERSION.msi"
          Rename-Item -Path $msiFile.FullName -NewName $newName
          echo "Windows installer artifact: $newName"
          dir target/jpackage/*.msi

      - name: Upload jpackage to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: powershell
        run: |
          $msiFile = Get-ChildItem -Path target/jpackage -Filter "mvn2llm-$env:VERSION.msi" | Select-Object -First 1
          gh release upload "v$env:VERSION" $msiFile.FullName --clobber

  build-jpackage-macos:
    needs: [prepare-release, build-jar]
    name: Build macOS jpackage
    runs-on: macos-latest
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/
          
      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          
      - name: Build jpackage DMG
        run: |
          # Convert version to semantic format (max 3 parts)
          SEMVER=$(echo ${VERSION} | sed -E 's/^([0-9]+)\.([0-9]+)\.([0-9]+).*/\1.\2.\3/')
          
          jpackage --input target \
                   --main-jar mvn2llm-${VERSION}.jar \
                   --name mvn2llm \
                   --app-version ${SEMVER} \
                   --type dmg \
                   --java-options "--enable-preview --enable-native-access=ALL-UNNAMED" \
                   --dest target/jpackage
          
          DMG_FILE=$(find target/jpackage -name "*.dmg" | head -1)
          NEW_NAME="mvn2llm-${VERSION}.dmg"
          mv "$DMG_FILE" "target/jpackage/$NEW_NAME"
          echo "macOS installer artifact: $NEW_NAME"
          ls -la target/jpackage/*.dmg

      - name: Upload jpackage to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "v${VERSION}" "target/jpackage/mvn2llm-${VERSION}.dmg" --clobber

  build-jpackage-linux:
    needs: [prepare-release, build-jar]
    name: Build Linux jpackage
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mvn2llm-jar
          path: target/
          
      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          
      - name: Build jpackage DEB
        run: |
          # Convert version to semantic format (max 3 parts)
          SEMVER=$(echo ${VERSION} | sed -E 's/^([0-9]+)\.([0-9]+)\.([0-9]+).*/\1.\2.\3/')
          
          jpackage --input target \
                   --main-jar mvn2llm-${VERSION}.jar \
                   --name mvn2llm \
                   --app-version ${SEMVER} \
                   --type deb \
                   --java-options "--enable-preview --enable-native-access=ALL-UNNAMED" \
                   --dest target/jpackage
          
          DEB_FILE=$(find target/jpackage -name "*.deb" | head -1)
          NEW_NAME="mvn2llm-${VERSION}.deb"
          mv "$DEB_FILE" "target/jpackage/$NEW_NAME"
          echo "Linux installer artifact: $NEW_NAME"
          ls -la target/jpackage/*.deb

      - name: Upload jpackage to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "v${VERSION}" "target/jpackage/mvn2llm-${VERSION}.deb" --clobber

  generate-checksums:
    needs: [ prepare-release, build-windows, build-macos, build-linux, build-jpackage-windows, build-jpackage-macos, build-jpackage-linux ]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir assets
          cd assets
          gh release download "v${VERSION}" --pattern "*"

      - name: Generate SHA256 checksums
        run: |
          cd assets
          sha256sum * > ../sha256sums.txt

      - name: Upload checksums
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "v${VERSION}" sha256sums.txt --clobber

